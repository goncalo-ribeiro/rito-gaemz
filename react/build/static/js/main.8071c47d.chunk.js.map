{"version":3,"sources":["components/home.tsx","constants/server.ts","components/elements/special_table.jsx","actions/tft.ts","actions/types.ts","components/tftInsights.tsx","components/tftProfile.tsx","components/riftInsights.tsx","components/riftProfile.tsx","utils/history.ts","components/elements/navbar.jsx","constants/routes.ts","App.tsx","serviceWorker.ts","reducers/tft.ts","configure_store.ts","index.tsx"],"names":["Home","descendingComparator","a","b","orderBy","newA","newB","split","parseFloat","ignored","EnhancedTableHead","props","classes","order","onRequestSort","headCells","TableHead","TableRow","map","headCell","TableCell","key","id","align","padding","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","border","clip","height","margin","overflow","position","top","SpecialTable","rows","forEach","row","elements","element","push","array","headers","obj","header","shift","createData","new","numeric","primaryKey","orderCol","orderDir","React","useState","setOrder","setOrderBy","selected","setSelected","Paper","TableContainer","Table","aria-labelledby","size","aria-label","numSelected","length","onSelectAllClick","target","checked","newSelecteds","n","name","rowCount","TableBody","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","tabIndex","src","server","alt","item","percent","returnRegion","region","type","payload","connect","tft","requestInsights","dispatch","axios","get","ADDRESS","result","console","log","data","response","status","changeRegion","requested","units","totalMatches","error","requestUnits","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","autoHide","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","Tabs","value","onChange","stuff","indicatorColor","textColor","centered","Tab","Button","variant","color","TFTProfile","RiftInsights","RiftProfile","createBrowserHistory","NavBar","history","location","pathname","page","setPage","route","component","Link","to","RouterPage","pageComponent","App","style","path","Boolean","window","hostname","match","INITIAL_STATE","composeEnhancers","compose","middlewares","ReduxThunk","config","storage","debug","process","blacklist","reducers","persistCombineReducers","state","REHYDRATE","store","createStore","applyMiddleware","persistor","persistStore","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8071c47d.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Home() {\n    return (\n        <div>\n            <h1>Home</h1>\n        </div>\n    )\n}\n","export default 'http://localhost:8000';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport server from '../../constants/server';\n\nfunction createData(array, headers) {\n    const obj = {};\n    headers.forEach(header => {\n        obj[header] = array.shift();\n    })\n  return obj;\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  let newA = a[orderBy];\n  let newB = b[orderBy];\n  try{\n    newA = newA.split('%')[0];\n    newB = newB.split('%')[0];\n    newA = parseFloat(newA);\n    newB = parseFloat(newB);\n  } catch(ignored) {\n\n  }\n  if (newB < newA) {\n    return -1;\n  }\n  if (newB > newA) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort, headCells } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align=\"center\"\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function SpecialTable(props) {\n    const rows = [];\n    props.rows.forEach(row => {\n        const elements = [];\n        props.elements.forEach(element => {\n            elements.push(row[element]);\n        });\n        rows.push(createData(elements, props.headers, row.id, row.new));\n    });\n    const headCells = [];\n    props.headers.forEach(header => {\n        headCells.push({ id: header, numeric: false, disablePadding: false, label: header});\n    });\n    const { primaryKey, orderCol, orderDir } = props;\n  const classes = useStyles();\n  const [order, setOrder] = React.useState(orderDir);\n  const [orderBy, setOrderBy] = React.useState(orderCol);\n  const [selected, setSelected] = React.useState([]);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n              headCells={headCells}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .map(row => {\n                  return (\n                    <TableRow\n                      tabIndex={-1}\n                      key={row[primaryKey]}\n                    >\n                        {\n                            props.headers.map(header => {\n                              if(header === 'Unit') {\n                                return (<TableCell align=\"center\" key={header}><div className=\"champion\"><img className=\"champion-icon\" src={server + '/champions/TFT4_' + row[header] + '.png'} alt=\"\" /> {row[header]}</div></TableCell>);\n                              }\n                              if(header === 'Items') {\n                                return (<TableCell align=\"center\" key={header}>\n                                  <div className=\"items\">\n                                    {row[header].map(item => {\n                                      return(\n                                        <div className=\"item\" key={item.id}>\n                                          <img className=\"item-icon\"  src={server + '/items/' + (item.id > 9 ? item.id : '0' + item.id) + '.png'} alt=\"\" />\n                                          <span>{item.percent}</span>\n                                        </div>\n                                      );\n                                    })}\n                                  </div>\n                                </TableCell>);\n                              }\n                              return (<TableCell align=\"center\" key={header}>{row[header]}</TableCell>);\n                            })\n                        }\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    </div>\n  );\n}","import axios from 'axios';\nimport ADDRESS from '../constants/server';\n\nimport {\n    RETURN_INSIGHTS,\n    FAIL_RETURN_INSIGHTS,\n    CHANGE_REGION,\n} from './types';\n\nconst returnInsights = (data:any) => ({\n    type: RETURN_INSIGHTS,\n    payload: data,\n});\n\nconst failReturn = () => ({\n    type: FAIL_RETURN_INSIGHTS,\n});\n\nexport const requestInsights = (region:number)  => {\n    return async (dispatch:Function) => {\n        try {\n            const result:any = await axios.get(ADDRESS + '/tft/units/' + region);\n            console.log(result);\n            dispatch(returnInsights(result.data));\n            return '';\n        } catch (error) {\n            console.log(error);\n            dispatch(failReturn());\n            if(error && error.response && error.response.status === 403) {\n                return '❌ API Key Expired!';\n            } else {\n                return '❌ Request Limit Reached!';\n            }\n        }\n    };\n};\n\nconst returnRegion = (region:number) => ({\n    type: CHANGE_REGION,\n    payload: region,\n});\n\nexport const changeRegion = () => (region:number) => {\n    return async (dispatch:Function) => {\n        dispatch(returnRegion(region));\n    };\n}","//TFTInsights\nexport const RETURN_INSIGHTS = 'RETURN_INSIGHTS';\nexport const FAIL_RETURN_INSIGHTS = 'FAIL_RETURN_INSIGHTS';\nexport const CHANGE_REGION = 'CHANGE_REGION';","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SpecialTable from './elements/special_table';\nimport Button from '@material-ui/core/Button';\nimport { toast } from 'react-toastify';\nimport {\n    requestInsights,\n    changeRegion,\n} from '../actions';\n\n\nfunction TFTInsights(props:any) {\n    const { requested, units, totalMatches, region, error } = props.tft;\n\n    const requestUnits = (region:number) => {\n        const result = props.requestInsights(region);\n        if(result) {\n            toast(result, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n            });\n        }\n    }\n    \n    const handleChange = (stuff: any, region:number) => {\n        props.changeRegion(region);\n        props.requestInsights(region);\n    }\n\n    units.length === 0 && !requested && !error && requestUnits(region);\n\n    return (\n        <Scrollbars\n          autoHide\n          className=\"scrollbar\"\n          renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n          renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n          renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n          renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n        >\n          <div className=\"app-container\">\n            <h3 className=\"center\">TFT Insights</h3>\n            <Tabs\n              value={region}\n              onChange={handleChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              centered\n            >\n              <Tab label=\"EU\" />\n              <Tab label=\"NA\" />\n              <Tab label=\"KR\" />\n            </Tabs>\n            {error ? (\n              <div className=\"full-width\">\n                <Button className=\"btn-main\" variant=\"contained\" color=\"primary\" onClick={() => {requestUnits(region)}}>Retry Request</Button>\n                <p className=\"note\">Request limit reached, please wait a bit before retrying.</p>\n              </div>\n            ) : (\n              <>\n                {!requested ? (\n                  <div className=\"center\"><div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>\n                ) : (\n                  <>\n                    <SpecialTable \n                      rows={units} \n                      headers={['Unit', '1st Place' , 'Top 4', 'Items']}\n                      elements={['unit', 'win', 'top', 'items']}\n                      primaryKey={\"Unit\"}\n                      orderCol=\"1st Place\"\n                      orderDir=\"desc\"\n                      rowCount={15}/>\n                    <p className=\"note\">Data recovered from {totalMatches} of the latest matches of the top Challenger players of the selected region.</p>\n                  </>\n                )}\n              </>\n            )}\n          </div>\n        </Scrollbars>\n    )\n}\n\nfunction mapStateToProps({tft}:any) {\n    return {\n        tft,\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {\n        requestInsights,\n        changeRegion,\n    },\n)(TFTInsights);","import React from 'react'\n\nexport default function TFTProfile() {\n    return (\n        <div>\n            <h1>TFT Profile</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function RiftInsights() {\n    return (\n        <div>\n            <h1>Rift Insights</h1>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function RiftProfile() {\n    return (\n        <div>\n            <h1>Rift Profile</h1>\n        </div>\n    )\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();\n","import React from 'react'\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport history from \"../../utils/history\";\nimport { Link } from '@reach/router';\n\nimport {\n    HOME_ROUTE,\n    TFT_INSIGHTS_ROUTE,\n    TFT_PROFILE_ROUTE,\n    RIFT_INSIGHTS_ROUTE,\n    RIFT_PROFILE_ROUTE,\n  } from \"../../constants/routes\";\n\nexport default function NavBar() {\n    let value = 0;\n    switch(history.location.pathname) {\n        case TFT_INSIGHTS_ROUTE:\n            value = 1;\n            break;\n        case TFT_PROFILE_ROUTE:\n            value = 2;\n            break;\n        case RIFT_INSIGHTS_ROUTE:\n            value = 3;\n            break;\n        case RIFT_PROFILE_ROUTE:\n            value = 4;\n            break;\n        default:\n    }\n  \n    const [page, setPage] = React.useState(value);\n  \n    const handleTabChange = (stuff, route) => {\n      setPage(route);\n    };\n\n    return (\n        <Tabs\n            value={page}\n            onChange={handleTabChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            centered\n        >\n            <Tab label=\"Home\" component={Link} to={HOME_ROUTE}/>\n            <Tab label=\"TFT Insights\" component={Link} to={TFT_INSIGHTS_ROUTE}/>\n            <Tab label=\"TFT Profile\" component={Link} to={TFT_PROFILE_ROUTE}/>\n            <Tab label=\"Rift Insights\" component={Link} to={RIFT_INSIGHTS_ROUTE}/>\n            <Tab label=\"Rift Profile\" component={Link} to={RIFT_PROFILE_ROUTE}/>\n        </Tabs>\n    )\n}\n","export const HOME_ROUTE = '/';\nexport const TFT_INSIGHTS_ROUTE = '/tft/insights';\nexport const TFT_PROFILE_ROUTE = '/tft/profile';\nexport const RIFT_INSIGHTS_ROUTE = '/rift/insights';\nexport const RIFT_PROFILE_ROUTE = '/rift/profile';","import React from \"react\";\nimport \"./assets/styles/main.scss\";\nimport { ToastContainer } from \"react-toastify\";\nimport Home from \"./components/home\";\nimport TFTInsights from \"./components/tftInsights\";\nimport TFTProfile from \"./components/tftProfile\";\nimport RiftInsights from \"./components/riftInsights\";\nimport RiftProfile from \"./components/riftProfile\";\nimport NavBar from \"./components/elements/navbar\";\nimport { Router, RouteComponentProps } from '@reach/router';\n\nimport {\n  HOME_ROUTE,\n  TFT_INSIGHTS_ROUTE,\n  TFT_PROFILE_ROUTE,\n  RIFT_INSIGHTS_ROUTE,\n  RIFT_PROFILE_ROUTE,\n} from \"./constants/routes\";\n\nconst RouterPage = (props: {pageComponent:JSX.Element} & RouteComponentProps) => {return props.pageComponent};\nexport default function App() {\n  return (\n    <main className=\"App\">\n      <ToastContainer />\n      <NavBar />\n      <Router style={{width: '100%', height: '100%'}}>\n          <RouterPage path={HOME_ROUTE} pageComponent={<Home />} />\n          <RouterPage path={TFT_INSIGHTS_ROUTE} pageComponent={<TFTInsights />} />\n          <RouterPage path={TFT_PROFILE_ROUTE} pageComponent={<TFTProfile />} />\n          <RouterPage path={RIFT_INSIGHTS_ROUTE} pageComponent={<RiftInsights />} />\n          <RouterPage path={RIFT_PROFILE_ROUTE} pageComponent={<RiftProfile />} />\n      </Router>\n    </main>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { REHYDRATE } from 'redux-persist';\n\nimport {\n    RETURN_INSIGHTS,\n    FAIL_RETURN_INSIGHTS,\n    CHANGE_REGION,\n} from '../actions/types';\n\ninterface TFTInsightsReducer {\n    requested: boolean,\n    units: any,\n    totalMatches: number,\n    region: number,\n    error: boolean,\n}\n\nconst INITIAL_STATE:TFTInsightsReducer = {\n    requested: false,\n    units: [],\n    totalMatches: 1,\n    region: 0,\n    error: false,\n};\n\nexport default function (state = INITIAL_STATE, { type, payload }:any) {\n    switch (type) {\n        case REHYDRATE:\n            if (payload && payload.tft) {\n                return {\n                    ...INITIAL_STATE,\n                };\n            }\n            return state;\n        case RETURN_INSIGHTS:\n            return {\n                ...state,\n                ...payload,\n                requested: true,\n                error: false,\n            };\n        case FAIL_RETURN_INSIGHTS:\n            return{\n                ...state,\n                error: true,\n            }\n        case CHANGE_REGION:\n            return {\n                ...state,\n                region: payload,\n                requested: false,\n                error: false,\n            }\n        default:\n            return state;\n    }\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { persistStore, persistCombineReducers } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport tft from './reducers/tft';\n\nconst isDevVersion:boolean = process.env.NODE_ENV === 'development';\nconst composeEnhancers:Function = (window as { [key: string]: any })['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] || compose;\nconst middlewares:any[] = [ReduxThunk];\n\nconst volatileReducers:any[] = [];\n\ninterface Config{\n    key:string,\n    storage:any,\n    debug:boolean,\n    blacklist:any[]\n}\n\nconst config:Config = {\n    key: 'root',\n    storage,\n    debug: isDevVersion,\n    blacklist: volatileReducers,\n};\n\nconst reducers:any = persistCombineReducers(config, {\n    tft,\n});\n\nexport const configureStore = () => {\n    const store:any = createStore(\n        reducers,\n        composeEnhancers(applyMiddleware(...middlewares)),\n    );\n\n    const persistor:any = persistStore(store);\n\n    // persistor.purge();\n    return { persistor, store };\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { configureStore } from './configure_store';\n\nconst { persistor, store } = configureStore();\n\nReactDOM.render(\n  <PersistGate persistor={persistor}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </PersistGate>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}